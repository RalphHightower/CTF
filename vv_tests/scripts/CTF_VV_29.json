{
    "test_script_number": "CTF-VV-29",
    "test_script_name": "CTF_VV_29.json",
    "owner": "CTF",
    "description": "Send a command to cFS and verify its receipt in telemetry, then repeat using raw command payloads",
    "requirements": {
        "CTF-56": "Full"
    },
    "ctf_options": {
        "verify_timeout": 4
    },
    "test_setup": "Need to run start script first to start cFS instance",
    "import": {},
    "tests": [
        {
            "test_number": "CTF-VV-29-1",
            "description": "Nominal OP",
            "instructions": [
                {
                    "instruction": "SendCfsCommand",
                    "data": {
                        "target": "",
                        "mid": "CFE_EVS_CMD_MID",
                        "cc": "CFE_EVS_RESET_FILTER_CC",
                        "args": {
                            "Payload": {
                                "AppName": "CI",
                                "EventID": "1"
                            }
                        }
                    },
                    "wait": 1
                },
                {
                    "instruction": "CheckTlmValue",
                    "data": {
                        "target": "",
                        "mid": "CFE_EVS_HK_TLM_MID",
                        "args": [
                            {
                                "compare": "==",
                                "variable": "Payload.CommandCounter",
                                "value": 1
                            }
                        ]
                    },
                    "wait": 3
                },
                {
                    "instruction": "SendCfsCommandWithRawPayload",
                    "description": "Send the command with an invalid raw binary payload to produce an error",
                    "data": {
                        "mid": "CFE_EVS_CMD_MID",
                        "cc": "CFE_EVS_RESET_FILTER_CC",
                        "hex_buffer": "0000000000000000000000000000000000000000010000000ea424c1"
                    }
                },
                {
                    "instruction": "CheckTlmValue",
                    "data": {
                        "target": "",
                        "mid": "CFE_EVS_HK_TLM_MID",
                        "args": [
                            {
                                "compare": "==",
                                "variable": "Payload.CommandCounter",
                                "value": 1
                            },
                            {
                                "compare": "==",
                                "variable": "Payload.CommandErrorCounter",
                                "value": 1
                            }
                        ]
                    },
                    "wait": 1
                },
                {
                    "instruction": "SendCfsCommandWithRawPayload",
                    "description": "Repeat the first valid command but with a raw binary payload",
                    "data": {
                        "mid": "CFE_EVS_CMD_MID",
                        "cc": "CFE_EVS_RESET_FILTER_CC",
                        "hex_buffer": "$hex_variable$"
                    }
                },
                {
                    "instruction": "CheckTlmValue",
                    "data": {
                        "target": "",
                        "mid": "CFE_EVS_HK_TLM_MID",
                        "args": [
                            {
                                "compare": "==",
                                "variable": "Payload.CommandCounter",
                                "value": 2
                            },
                            {
                                "compare": "==",
                                "variable": "Payload.CommandErrorCounter",
                                "value": 1
                            }
                        ]
                    },
                    "wait": 1
                }
            ]
        }
    ]
}